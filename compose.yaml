services:
  # Aplicação Go
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gin-quickstart-api
    restart: unless-stopped
    ports:
      - 8000:8000
    env_file:
      - .env.example
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gin-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8000/helthz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Banco PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: gin-quickstart-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=gin_quickstart
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - gin-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gin_quickstart"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # pgAdmin para administração do banco (opcional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gin-quickstart-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - gin-network
    profiles:
      - dev # Só ativa no perfil de desenvolvimento

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  gin-network:
    driver: bridge
